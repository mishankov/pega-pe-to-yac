name: New VM

on:
  workflow_dispatch:

env:
  SSH_KEY: cache/sshkey
  INSTANCE_NAME: pega

jobs:
  new-vm:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download Yandex Cloud CLI
        run: curl https://raw.githubusercontent.com/Jokero/yandex-cloud-cli-install-for-ci/master/install.sh | bash
      
      - name: Check version
        run: ~/yandex-cloud/bin/yc -v

      - name: Show existing compute instances
        run: ~/yandex-cloud/bin/yc --token ${{ secrets.YC_TOKEN }} --cloud-id ${{ secrets.YC_CLOUD_ID }} --folder-id ${{ secrets.YC_FOLDER_ID }} compute instance list

      - name: Create cache dir
        run: mkdir -p cache

      - name: Generate new key pair if not exist
        run: "[ -f $SSH_KEY ] || ssh-keygen -b 2048 -t rsa -f $SSH_KEY -q -N \"\""

      - name: Create Yandex.Cloud compute instance
        run: |
          ~/yandex-cloud/bin/yc \
            --token ${{ secrets.YC_TOKEN }} --cloud-id ${{ secrets.YC_CLOUD_ID }} --folder-id ${{ secrets.YC_FOLDER_ID }} \
            compute instance create \
            --name $INSTANCE_NAME \
            --zone ru-central1-a \
            --public-ip \
            --create-boot-disk size=30G,image-folder-id=standard-images,image-family=centos-stream-8 \
            --preemptible \
            --core-fraction 50 \
            --memory 8 \
            --ssh-key $SSH_KEY.pub
      
      - name: Show existing compute instances again
        run: ~/yandex-cloud/bin/yc --token ${{ secrets.YC_TOKEN }} --cloud-id ${{ secrets.YC_CLOUD_ID }} --folder-id ${{ secrets.YC_FOLDER_ID }} compute instance list
      
      - name: Print new vm config to file
        run: |
          ~/yandex-cloud/bin/yc \
            --token ${{ secrets.YC_TOKEN }} --cloud-id ${{ secrets.YC_CLOUD_ID }} --folder-id ${{ secrets.YC_FOLDER_ID }} \
            compute instance get $INSTANCE_NAME > cache/vmconfig.txt
        
      - name: Save address to cache
        run: "cat cache/vmconfig.txt | grep -v 'address: 10'  | grep ' address:' | tr -d ' address:' > cache/addr"

      - name: Upload cache to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: new-vm-cache
          path: cache
          retention-days: 1

      - run: chmod 600 $SSH_KEY
      - run: "scp -i $SSH_KEY -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null tomcat.service yc-user@`cat cache/addr`:"
      - run: "scp -i $SSH_KEY -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null context.xml yc-user@`cat cache/addr`:"
      - run: "scp -i $SSH_KEY -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null pg_hba.conf yc-user@`cat cache/addr`:"
      - run: echo ./dl-cloud-mail-ru.sh ${{ secrets.LINK_PG }} postgresql-42.0.0.jar > download.sh
      - run: echo ./dl-cloud-mail-ru.sh ${{ secrets.LINK_HELP }} prhelp.war >> download.sh
      - run: echo ./dl-cloud-mail-ru.sh ${{ secrets.LINK_WEB }} prweb.war >> download.sh
      - run: echo ./dl-cloud-mail-ru.sh ${{ secrets.LINK_DUMP1 }} pega.001 >> download.sh
      - run: echo ./dl-cloud-mail-ru.sh ${{ secrets.LINK_DUMP2 }} pega.002 >> download.sh
      - run: echo ./dl-cloud-mail-ru.sh ${{ secrets.LINK_DUMP3 }} pega.crc >> download.sh
      - run: echo exit >> download.sh
      - run: ssh -i $SSH_KEY -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t -t yc-user@`cat cache/addr` < before.sh
      - run: ssh -i $SSH_KEY -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t -t yc-user@`cat cache/addr` < download.sh
      - run: ssh -i $SSH_KEY -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t -t yc-user@`cat cache/addr` < db-install.sh
      - run: ssh -i $SSH_KEY -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t -t yc-user@`cat cache/addr` < tomcat-install.sh